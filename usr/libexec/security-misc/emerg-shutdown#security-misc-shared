#!/bin/bash

## Copyright (C) 2025 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -o errexit
set -o nounset
set -o errtrace
set -o pipefail

## Make sure globs sort in a predictable, reproducible fashion
export LC_ALL=C

in_dracut='false'
if [ -f '/dracut-state.sh' ]; then
  in_dracut='true'
fi
binary_prefix='/run'
EMERG_SHUTDOWN_KEYS=''
root_devices[0]=''

gcc_hardening_options=(
  "-O2" "-Wall" "-Wextra" "-Wformat" "-Wformat=2" "-Wconversion"
  "-Wimplicit-fallthrough" "-Werror=format-security" "-Werror=implicit"
  "-Werror=int-conversion" "-Werror=incompatible-pointer-types"
  "-Wformat-overflow" "-Wformat-signedness" "-Wnull-dereference" "-Winit-self"
  "-Wmissing-include-dirs" "-Wshift-negative-value" "-Wshift-overflow"
  "-Wswitch-default" "-Wuninitialized" "-Walloca" "-Warray-bounds"
  "-Wfloat-equal" "-Wshadow" "-Wpointer-arith" "-Wundef" "-Wunused-macros"
  "-Wbad-function-cast" "-Wcast-qual" "-Wcast-align" "-Wwrite-strings"
  "-Wdate-time" "-Wstrict-prototypes" "-Wold-style-definition"
  "-Wredundant-decls" "-Winvalid-utf8" "-Wvla" "-Wdisabled-optimization"
  "-Wstack-protector" "-Wdeclaration-after-statement" "-Wtrampolines"
  "-Wbidi-chars=any,ucn" "-Wformat-overflow=2" "-Wformat-truncation=2"
  "-Wshift-overflow=2" "-Wtrivial-auto-var-init" "-Wstringop-overflow=3"
  "-Wstrict-flex-arrays" "-Walloc-zero" "-Warray-bounds=2"
  "-Wattribute-alias=2" "-Wduplicated-branches" "-Wduplicated-cond"
  "-Wcast-align=strict" "-Wjump-misses-init" "-Wlogical-op" "-U_FORTIFY_SOURCE"
  "-D_FORTIFY_SOURCE=3" "-fstack-clash-protection" "-fstack-protector-all"
  "-fno-delete-null-pointer-checks" "-fno-strict-aliasing"
  "-fsanitize=address,undefined" "-fno-sanitize-recover=all"
  "-fstrict-flex-arrays=3" "-ftrivial-auto-var-init=pattern" "-fPIE"
)

gcc_machine="$(gcc -dumpmachine)"
if [ "${gcc_machine}" = 'x86_64-linux-gnu' ]; then
  gcc_hardening_options+=( '-fcf-protection=full' )
elif [ "${gcc_machine}" = 'aarch64-linux-gnu' ]; then
  gcc_hardening_options+=( '-mbranch-protection=standard' )
fi

gcc_hardening_options+=(
  "-Wl,-z,nodlopen" "-Wl,-z,noexecstack" "-Wl,-z,relro" "-Wl,-z,now"
  "-Wl,--as-needed" "-Wl,--no-copy-dt-needed-entries" "-pie"
)

## Read emergency shutdown key configuration
for config_file in /etc/security-misc/emerg-shutdown/*.conf /usr/local/etc/security-misc/emerg-shutdown/*.conf; do
  if [ -f "${config_file}" ]; then
    bash -n "${config_file}"
    source "${config_file}"
  fi
done

if [ "${in_dracut}" = 'true' ]; then
  binary_prefix=''
  modprobe evdev || {
    printf '%s\n' 'Failed to load evdev driver!'
    exit 1
  }
  ## modules may not work immediately after loaded, give them time to
  ## initialize
  sleep 0.1
else
  ## Find the devices that make up the root device
  readarray -t root_devices < <(/usr/libexec/helper-scripts/get-backing-devices-for-mountpoint '/') || true;

  ## Build the actual emerg-shutdown executable
  if [ ! -f '/run/emerg-shutdown' ]; then
    gcc \
      -g
      /usr/src/security-misc/emerg-shutdown.c \
      -o \
      /run/emerg-shutdown \
      -static \
      "${gcc_hardening_options[@]}" \
      || {
        printf "%s\n" 'Could not compile force-shutdown executable!'
        exit 1
      }
  fi

  ## memlockd daemonizes itself, so no need to background it.
  memlockd -c /usr/share/security-misc/security-misc-memlockd.cfg || true
fi

systemd-notify --ready

## Launch emerg-shutdown
IFS=','
"${binary_prefix}/emerg-shutdown" "--devices=${root_devices[*]}" "--keys=${EMERG_SHUTDOWN_KEYS}"
